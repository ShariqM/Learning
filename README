# Code for UC Berkeley Theoretical Neuroscience Lab Paper:
# - Learning and exploration in action-perception loops
#   by Daniel Y. Little and Friedrich T. Sommer (2013)
# - The code has been extended to strategies where the agent does
#   not know the size of the state space.

# Use
python worldrunner.py
python mazerunner.py
# In config.py you can change the SETTINGS variable to different file names in
# settings/ to run different experiments.

# Help
python worldrunner.py --help
python mazerunner.py --help

# Dependencies
# - matplotlib
#
# I recommend this resource for acquiring these packages:
# http://www.lowindata.com/2013/installing-scientific-python-on-mac-os-x/
# I did have a problem with matplotlib because freetype was installed
# improperly. Specifically the C code was not added to the default C path.

# Descriptions and Organization of files

    # Configuration Files

        # config.py - Parameters that are generally fixed are located in this
            # file, the rest are loaded from a settings file which is specified here
            # (in config.py). Included here are:
            # - Graphics, Parallelization switch, dump to stdout, etc.
            # - Settings file to load (see beloow)
            # - etc.
        # settings/ - Various files in this directory contain parameters for
            # different experiments. Parameters include
                # Number of steps and runs
                # Maze file
                # etc
            # Files ( _p_ signifies experiments from the (P)aper)
                # settings.py - custom test
                # settings_simple.py - short quick experiment
                # settings_p_chain.py - chain experiment from paper
                # settings_p_maze.py - maze experiment from paper
                # settings_p_umaze.py - unbounded maze experiment from paper

    # True Model Files in environment/
        # World.py - 123 World representation
            # WorldNode.py - 123 World Node representation

        # Maze.py - Maze representation
            # MazeNode.py - Maze Node representation

        # Maze3d.py - 3d Maze representation

        # Chain.py - 5 state chain problem from Sterns 2000
            # ChainNode.py - Chain node representation

        # Graph.py - Experimental environment with varied out edge degree for each node
            # GraphNode.py - Graph node representation

    # Internal Model Files in imodels/
        # model.py - The model super class, implements methods all models have

        # BayesWorld.py - Internal Model used to learn 123World
            # BayesWorldNode.py - Node of Internal Model

        # Dirichlet.py - Internal Model used to learn Mazes and Dense Worlds
            # DirichletNode.py - Node of Internal Model

        # Chinese.py - Internal Model built from the Chinese Restaurant Process
            # ChineseNode.py - Node of Internal Model

        # Hypothetical.py - Wrapper around Internal Models that is used to
        #                   create hypothetical updates so that PIG can be
        #                   calculated

        # Gamma.py - Experimental PSI ratio model
            # GammaNode.py - Node of Internal Model

        # GammaPYP.py - Experimental Mix of Gamma and CRP/PYP model model
            # GammaPYPNode.py - Node of Internal Model

    # Strategy Files
        # strat.py - The strat super class, implements common methods

        # RandomStrat.py - Chooses actions randomely (Negative Control)

        # UnembodiedStrat.py - An agent that can move to any state it wants.
        # It looks for the (s,a) that maximizes and takes it (Positive Control)

        # PigGreedyStrat.py - An agent that is embodied, i.e. it has a position,
        # takes actions, and is stuck with where the real model takes it. It
        # picks the action from it's current state that maximizes its PIG. It's
        # greedy because it doesn't look into the future.

        # PigVIStrat.py - A PigGreedyStrat that isn't greedy, it looks N time
        # steps ahead using (V)alue (I)teration  and chooses the action that
        # maximizes PIG over those N time steps. An optional argument to this
        # strategy allows it to use the real model when calculating PIG, this
        # strategy is known as PIGVI+ in the paper.

        # CBstrat.py - Tries to keep the count of each state equal

        # LTAstrat.py - An agent takes the action least taken in the current state

        # LTAVIstrat.py - An agent does (V)alue ()Iteration with the LTA strategy

        # e3strat.py - Abandoned strategy

        # bosstrat.py - BOSS algorithm strategy

        # dystrat.py - A combination of two strategies

        # chainstrat.py - strat that does the best on chain environment

    # Graphics (Visualizing the strategies exploration)
        # graphics.py - Responsible for drawing how the agent explores the
        # maze.

    # Graph generating files
        # Runner.py - Abstract class that implements that simulates an
        #             arbitrary environment with arbitrary strategies
        #             and generates a graph of Missing Information vs. Time

            # WorldRunner.py - Generate graphs for 123World environment
            # MazeRunner.py  - Generate graphs for Maze environment
            # ChainRunner.py - Generate graphs for Chain environment

    # ifunctions.py - (I)nformation Functions (Key ones in paper)
    #                   - KL Divergence
    #                   - Missing Information
    #                   - Predicted Information Gain (PIG)

    # functions.py - Miscellaneous functions

    # colors.py - maps color name to RGB triplet

    # Maze format files (in maze_files/ dir)
        # - Mazes are constructed from .mz files which specify the format
        # - Mazes can be generated by running maze_gen.py

        # - Maze file names are described as follows:
        #   - [sN] indicates it's a NxN maze
        #   - [b]  indicates it's a maze with no transporters
        #   - [nw] No walls
        #   e.g. maze_s3b.py is a 3x3 maze with no transporters

        # maze.mz - representation of maze described in paper (default maze)
        # maze_s30.txt - 'unbounded' maze with multiple gravity wells

        # You can generate more mazes by using maze_gen.py

#TODO
# - Continuous state space
# - maze_gen with transporters
# - maze_gen with no walls
# - fix piggreedy to work with graphics
# - fix piggreedy to have explorer arg
# - fix unembodied to have explorer?
# - more comments
# - WorldRunner.py probably doesn't even work anymore

# Author
Shariq Mobin (Shariq.Mobin@gmail.com)
