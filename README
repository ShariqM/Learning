# Code for UC Berkeley Theoretical Neuroscience Lab Paper:
# - Learning and exploration in action-perception loops
#   by Daniel Y. Little and Friedrich T. Sommer (2013)
# - The code has been extended to strategies where the agent does
#   not know the size of the state space.

# Use
python worldrunner.py
python mazerunner.py

# Help
python worldrunner.py --help
python mazerunner.py --help

# Dependencies
# - matplotlib
#
# I recommend this resource for acquiring these packages:
# http://www.lowindata.com/2013/installing-scientific-python-on-mac-os-x/
# I did have a problem with matplotlib because freetype was installed
# improperly. Specifically the C code was not added to the default C path.

# Descriptions and Organization of files

    # Model Files
        # model.py - The model super class, implements methods all models have

        # Real Model Files
            # World.py - 123 World representation
                # WorldNode.py - 123 World Node representation

            # Maze.py - Maze representation
                # MazeNode.py - Maze Node representation

        # Internal Model Files
            # BayesWorld.py - Internal Model used to learn 123World
                # BayesWorldNode.py - Node of Internal Model

            # Dirichlet.py - Internal Model used to learn Mazes and Dense Worlds
                # DirichletNode.py - Node of Internal Model

            # DirichletProcess.py - Internal Model used to learn Mazes, follows the
            #                       Chinese Restaurant Process Model
                # DirichletProcessNode.py - Node of Internal Model

            # Hypothetical.py - This wraps around an Internal Model and is used to
            #                   create hypothetical updates to the model so that
            #                   PIG can be calculate


    # Strategy Files
        # RandomStrat.py - Chooses actions randomely (Negative Control)

        # UnembodiedStrat.py - An agent that can move to any state it wants.
        # It looks for the (s,a) that maximizes and takes it (Positive Control)

        # PigGreedyStrat.py - An agent that is embodied, i.e. it has a position,
        # takes actions, and is stuck with where the real model takes it. It
        # picks the action from it's current state that maximizes its PIG. It's
        # greedy because it doesn't look into the future.

        # PigVIStrat.py - A PigGreedyStrat that isn't greedy, it looks N time
        # steps ahead using (V)alue (I)teration  and chooses the action that
        # maximizes PIG over those N time steps. An optional argument to this
        # strategy allows it to use the real model when calculating PIG, this
        # strategy is known as PIGVI+ in the paper.

        # LTA.py - An agent takes the action least taken in the current state

        # LTAVI.py - An agent does (V)alue ()Iteration with the LTA strategy

    # Graphics (Visualizing the strategies exploration)
        # graphics.py - Responsible for drawing how the agent explores the
        # maze.

    # Graph generating files
        # Runner.py - Abstract class that implements that simulates an
        #             arbitrary environment with arbitrary strategies
        #             and generates a graph of Missing Information vs. Time

            # WorldRunner.py - Generate graphs for 123World environment
            # MazeRunner.py  - Generate graphs for Maze environment

    # ifunctions.py - (I)nformation Functions (Key ones in paper)
    #                   - KL Divergence
    #                   - Missing Information
    #                   - Predicted Information Gain (PIG)

    # functions.py - Miscellaneous functions

    # Maze format files
        # - Mazes are constructed from .mz files which specify the format
        # - Mazes can be generated by running maze_gen.py
        # - Maze.mz files are stored in the maze_files/ directory

        # - Maze file names are described as follows:
        #   - [sN] indicates it's a NxN maze
        #   - [b]  indicates it's a maze with no transporters
        #   - [nw] No walls
        #   e.g. maze_s3b.py is a 3x3 maze with no transporters

        # maze.mz - representation of maze described in paper (default maze)

#TODO
# - Continuous state space
# - maze_gen with transporters
# - maze_gen with no walls
# - fix FIXME's in pigvistrat


# Author
Shariq Mobin (Shariq.Mobin@gmail.com)
